이진탐색 역시 분할정복 알고리즘에 해당 되는 하나의 예시이다. 이진 탐색은 한 번 탐색이 끝나면 절반
씩 날리는 알고리즘으로써 매우 빠른 속도를 자랑한다. 구체적으로 약 1000만개의 데이터를 7번 만의 
시행으로 탐색을 마칠 수 있다. 또한 이진 탐색의 기본 원리가 다른 알고리즘에서 또한 많이 쓰인다는
장점이 있다. 단, 이진탐색의 시행에는 조건이 있다. 우선 데이터가 순서에 따라 정렬되어 있어야 하며,
시작점, 끝점, 중간점으로 세 개의 변수가 존재해야 한다는 것이다. 

1     2     3     4     5
이러한 오름차순 정렬에서 값=2인 원소를 찾을 때 시작점은 1, 중간점은 3, 끝점은 5이다.
1     2     3
찾는 원소가 중간 점 3보다 작은 값이기 때문에 중간 점 뒤의 원소들을 배제한다.
1    <2>    3
이 상태에서 의 중간점이 곧 찾고 있는 값이 2인 원소이므로 이진탐색을 종료한다. 

//이진탐색
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

typedef int element;

typedef struct
{
	element* data;
	int size;
}datatable;

void init(datatable* dt)
{
	dt->size = 0;
}

void makedatatable(datatable* dt, int n)
{
	srand(time(NULL));
	dt->data = (element*)malloc(sizeof(element) * n);
	for (int i = 0; i < n; i++)
	{
		dt->data[i] = rand() % 100;
		dt->size++;
	}
}

void printdatatable(datatable* dt)
{
	for (int i = 0; i < dt->size; i++)
		printf("[%d] ", dt->data[i]);
	printf("\n");
}

void insertionsort(datatable* dt)
{
	int i, j;
	element item;

	for (i = 1; i < dt->size; i++)
	{
		item = dt->data[i];
		for (j = i - 1; j >= 0 && dt->data[j] > item; j--)
			dt->data[j + 1] = dt->data[j];
		dt->data[j + 1] = item;
	}
}

int findelement(datatable* dt, int key)    //반복의 방법으로 탐색
{
	int low = 0;
	int middle;
	int high = dt->size - 1;

	while (low <= high)
	{
		middle = (low + high) / 2;
		if (key == dt->data[middle])
			return middle;
		else if (key < dt->data[middle])
			high = middle - 1;
		else
			low = middle + 1;
	}

	return -1;
}

int rfindelement(datatable* dt, int key, int low, int high)
{
	int middle;
	if (low <= high)
	{
		middle = (low + high) / 2;
		if (key == dt->data[middle])
			return middle;
		else if (key < dt->data[middle])
			return rfindelement(dt, key, low, middle - 1);
		else
			return rfindelement(dt, key, middle + 1, high);
	}
	return -1;
}

int main()
{
	datatable dt;
	init(&dt);

	int n;
	scanf("%d", &n);

	makedatatable(&dt, n); printdatatable(&dt);
	insertionsort(&dt); printdatatable(&dt);

	scanf("%d", &n);
	n = findelement(&dt, n);
	
	if (n == -1)
		printf("no search key\n");
	else
		printf("key index: %d\n", n);

	scanf("%d", &n);
	n = rfindelement(&dt, n, 0, dt.size - 1);

	if (n == -1)
		printf("no search key\n");
	else
		printf("key index: %d\n", n);
}
