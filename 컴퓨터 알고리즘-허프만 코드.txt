정보통신공학과 202101642 전진

허프만 코드는 greedy알고리즘 중의 하나로 길이가 긴 데이터를 효율적으로 압축 할 수 있는 코드이다.
이 코드는 효율적인 압축을 위해 문자열에 포함 되는 각 문자들의 빈도수를 기준으로 새로운 코드를
생성한다. 즉, 빈도수가 낮은 문자일수록 길이가 긴 코드를 생성하고, 반대로 빈도수가 높은 문자일수록 
길이가 짧은 코드를 생성한다.

허프만 코드의 생성 과정은 다음과 같다.

<1>. 해당 문자의 빈도수를 저장한 노드들을 생성한다.

<2>. 빈도수를 기준으로 노드 트리를 생성한다.
   ->가장 작은 빈도수의 노드(a)와 두 번째로 작은 빈도수의 노드(b)를 하나의 노드로 합친다(작은 트리 생성).
      이때, a가 왼쪽 자식 노드, b가 오른쪽 자식 노드가 된다.

<3>. 2번의 과정을 반복한다.

<4>. 허프만 트리 노드가 완성되면 왼쪽의 간선에 0, 오른쪽의 간선에는 1을 부여한다.

<5>. 해당 문자노드까지 간선들의 가중치 합이 새로 생성된 해당 문자의 허프만 코드이다.

위의 과정을 따른 실제 허프만 코드의 생성 과정은 다음과 같다.

=>문자열 JUNJIN의 허프만 코드 생성
J, U, N, I로 문자열에 필요한 문자의 개수는 4개 이므로 2비트가 필요하다. {2^1(=2) < 4 <= 2^2(=4)}
J: 00
U: 01
N: 10
I: 11
이 때 문자열은 00 01 10 00 11 10이다.
이 문자열을 허프만 코드로 변환하기 위해 허프만 트리를 생성하면 다음과 같다.
                                                   
                                                        6
                                                  0   /    ＼ 1
                                                    /        ＼
                                                  2:N          4
                                                         0   /    ＼ 1
                                                           /        ＼
                                                         2           2:J
                                                   0   / ＼  1
                                                      /     ＼
                                                   1:I        1:U  

완성 된 트리에서 생성 된 각 문자의 허프만 코드는 다음과 같다.       
N: 0
J: 11
I: 100
U: 101
이 때 문자열은 11 101 0 11 100 0이다.

00 01 10 00 11 10 (12) => 11 101 0 11 100 0 (12)
각 문자의 빈도수를 기준으로 허프만 코드를 통해 압축했지만 코드의 길이가 같으므로 효율적이라고 할 수 없다.

=> 문자열 XYYZZZRRRR의 허프만 코드 생성
X, Y, Z, R로 문자열에 필요한 문자의 개수는 4개 이므로 2비트가 필요하다. {2^1(=2) < 4 <= 2^2(=4)}
X: 00
Y: 01
Z: 10
R: 11
이 때 문자열은 00 01 01 10 10 10 11 11 11 11이다.
이 문자열을 허프만 코드로 변환하기 위해 허프만 트리를 생성하면 다음과 같다.

                                                        10
                                                  0   /    ＼ 1
                                                    /        ＼
                                                 4:R           6
                                                         0   /    ＼ 1
                                                           /        ＼
                                                         3           3:Z
                                                   0   / ＼  1
                                                      /     ＼
                                                   1:X        2:Y  

완성 된 트리에서 생성 된 각 문자의 허프만 코드는 다음과 같다.       
R: 0
Z: 11
X: 100
Y: 101
이 때 문자열은 100 101 101 11 11 11 0 0 0 0이다.

00 01 01 10 10 10 11 11 11 11 (20) => 100 101 101 11 11 11 0 0 0 0 (19)
허프만 코드를 통해 코드가 더 짧아졌으므로 효율적인 압축이라고 할 수 있다.

==> 위 2개의 구체적인 예시를 통해 문자열이 길면 길수록 더욱 효과적인 압축이 가능하다는 허프만 코드의
특징을 파악 할 수 있다.

#include<stdio.h>
#include<stdlib.h>
#include<string.h>

#define max 100
#define alphnum 26

typedef struct node  //트리 노드
{
	char alphabet;  
	int freq;
	struct node* left; 
	struct node* right; 
}node;

node nodearray[alphnum] = { NULL };
int x = 0;  //문자 갯수

node* makenode(char alphabet, int freq, struct node* left, struct node* right) //새로운 노드 생성
{
	node* newnode = (node*)malloc(sizeof(node));
	newnode->alphabet = alphabet;
	newnode->freq = freq;
	newnode->left = left;
	newnode->right = right;

	return newnode;
}

node* makehuffmantree(char arr[])  //허프만 코드의 트리 생성
{
	int i = 0;
	int j;
	int temp_n = 0;
	int min = 0;  
	int min2 = 0; 
	int fre[alphnum] = { 0 };  
	int check[alphnum] = { 0 };  

	node* tree[alphnum] = { NULL };  //비교를 위한 노드의 배열
	node* new_node; 

	while (arr[i] != NULL)
	{
		fre[arr[i] - 'A']++;  //빈도 수 파악
		i++;
	}

	for (int i = 0; i < alphnum; i++)
	{
		if (fre[i] != 0)
		{
			nodearray[x] = *makenode(i + 'A', fre[i], NULL, NULL);
			tree[x++] = makenode(i + 'A', fre[i], NULL, NULL); 
		}
	}

	for (i = 0; i < x - 1; i++)
	{
		j = 0;
		while (check[j] == -1)	j++; 
		min = j; 

		for (j = min; j < x - 1; j++) 
			if (check[j] != -1) //합쳐지지 않아서 검사가 필요한 노드
				if (tree[min]->freq > tree[j]->freq)
					min = j;

		j = 0;
		while (check[j] == -1 || j == min) j++;
		min2 = j; 

		for (j = min2; j < x; j++)
			if (check[j] != -1) 
				if (tree[min2]->freq > tree[j]->freq)
					if (j != min) 
						min2 = j;

		tree[min] = makenode(NULL, tree[min]->freq + tree[min2]->freq, tree[min], tree[min2]);
		//min과 min2인덱스의 빈도수의 합으로 새로운 노드를 생성
		
		check[min2] = -1;  //min2인덱스는 min인덱스와 합쳐진다고 보면 된다.
	}

	return tree[min];
}

void maketable(node* n, char str[], int len, char* table[]) // 빈도수 기준의 새로운 코드 배열을 생성
{
	if (n->left == NULL && n->right == NULL) 
	{
		str[len] = '\0'; 
		strcpy(table[(n->alphabet) - 'A'], str);
	}

	else 
	{
		if (n->left != NULL) 
		{
			str[len] = '0'; //문자열에 0을 삽입
			maketable(n->left, str, len + 1, table); 
		}

		if (n->right != NULL) 
		{
			str[len] = '1'; //문자열에 1을 삽입
			maketable(n->right, str, len + 1, table);
		}
	}

}

void main()
{
	char arr[max]; 
	char* code[alphnum]; //각 문자에 대해서 생성 된 코드의 배열
	char str[max]; 
	char encoding[max] = ""; 
	int i; 
	char answer; 
	node* root;

	for (i = 0; i < alphnum; i++)
		code[i] = (char*)malloc(sizeof(char));

	printf("압축하고자 하는 문자열(대문자) : ");
	scanf("%s", arr); 
	printf("\n");

	root = makehuffmantree(arr); //허프만 코드를 이용한 트리 생성
	maketable(root, str, 0, code); //트리를 기반으로 생성된 문자 별 빈도수에 의한 코드 생성

	i = 0;
	while (arr[i] != NULL)
	{ 
		strcat(encoding, code[arr[i] - 'A']); 
		strcat(encoding, " ");
		i++;
	}

	for (i = 0; i < x; i++)
		printf("%c : %s\n", nodearray[i].alphabet, code[nodearray[i].alphabet - 'A']);
	printf("\n");

	printf("압축한 결과 : %s\n", encoding); 
}






                                                                       
